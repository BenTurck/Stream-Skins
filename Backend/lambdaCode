const randomBytes = require('crypto').randomBytes;

const AWS = require('aws-sdk');

const ddb = new AWS.DynamoDB.DocumentClient();

const games = [

    {
        Name: 'Valorant',
    },
    {
        Name: 'Overwatch',
    },
    {
        Name: 'Smash Bros',
    },
    {
        Name: 'League of Legends',
    },
];

exports.handler = (event, context, callback) => {
    if (!event.requestContext.authorizer) {
      errorResponse('Authorization not configured', context.awsRequestId, callback); //Quick test to make sure it is working.
      return;
  }

function errorResponse(errorMessage, awsRequestId, callback) {

  callback(null, {
  
    statusCode: 500,
    body: JSON.stringify({
      Error: errorMessage,
      Reference: awsRequestId,
    }),
    headers: {
      'Access-Control-Allow-Origin': '*',
    },
  });
}

function toUrlString(buffer) {

    return buffer.toString('base64')
        .replace(/\+/g, '-')
        .replace(/\//g, '_')
        .replace(/=/g, '');
    }
}

//New Code - - - - - - - - - - - - - -  

const username = event.requestContext.authorizer.claims['cognito:username'];
const email = event.requestContext.authorizer.claims['cognito:username'];

recordUser(username, email).then(() => {
        
        callback(null, {
        
            statusCode: 201,
            body: JSON.stringify({
            
                User: username,
                Email: email,
                
            }),
            headers: {
                'Access-Control-Allow-Origin': '*',
            },
        });
    }).catch((err) => {
        console.error(err);
        errorResponse(err.message, context.awsRequestId, callback)
    });
};












